#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
MAIN - Automa√ß√£o SIOP
====================

Entry point principal para execu√ß√£o da automa√ß√£o SIOP
Vers√£o clean preparada para implementa√ß√£o S3

Modos de execu√ß√£o:
- main: Execu√ß√£o principal do bot completo
- enhanced: Execu√ß√£o com upload S3 autom√°tico
- test: Testes b√°sicos de funcionamento
"""

import sys
import os
import argparse
from dotenv import load_dotenv

# Carregar vari√°veis de ambiente
load_dotenv()

def run_main():
    """Executa bot principal completo"""
    print("üöÄ EXECUTANDO AUTOMA√á√ÉO SIOP")
    print("="*50)
    
    try:
        # Importar e executar c√≥digo principal
        from siop_core import executar_automacao_completa
        executar_automacao_completa()
    except Exception as e:
        print(f"‚ùå Erro na execu√ß√£o: {e}")
        return False
    
    return True

def run_enhanced():
    """Executa bot com upload S3"""
    print("üöÄ EXECUTANDO AUTOMA√á√ÉO SIOP COM S3")
    print("="*50)
    
    try:
        # Importar e executar c√≥digo principal
        from siop_core import executar_automacao_completa
        
        # Executar automa√ß√£o normal
        result = executar_automacao_completa()
        
        if result:
            # Upload para S3 usando o backend
            print("\nüì§ INICIANDO UPLOAD PARA S3...")
            import sys
            import os
            sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'backend'))
            
            from services.s3_service import S3Service
            
            s3_service = S3Service()
            downloads_path = os.path.join(os.getcwd(), "..", "downloads", "siop")
            
            # Fazer upload de todos os arquivos CSV
            from pathlib import Path
            csv_files = list(Path(downloads_path).glob("*.csv"))
            
            if csv_files:
                upload_success = True
                for csv_file in csv_files:
                    try:
                        s3_service.upload_file(str(csv_file), f"siop-data/{csv_file.name}")
                        print(f"‚úÖ Arquivo enviado: {csv_file.name}")
                    except Exception as e:
                        print(f"‚ùå Erro ao enviar {csv_file.name}: {e}")
                        upload_success = False
                
                if upload_success:
                    print("‚úÖ Upload para S3 conclu√≠do com sucesso!")
                else:
                    print("‚ö†Ô∏è Upload parcial - alguns arquivos falharam")
            else:
                print("‚ö†Ô∏è Nenhum arquivo CSV encontrado para upload")
        
        return result
        
    except Exception as e:
        print(f"‚ùå Erro na execu√ß√£o enhanced: {e}")
        return False

def run_test():
    """Executa testes b√°sicos"""
    print("üß™ EXECUTANDO TESTES")
    print("="*30)
    
    success = True
    
    # Teste 1: Importa√ß√µes
    try:
        from siop_core import SiopAutomacao
        print("‚úÖ Importa√ß√µes funcionando")
    except Exception as e:
        print(f"‚ùå Erro nas importa√ß√µes: {e}")
        success = False
    
    # Teste 2: Inicializa√ß√£o
    try:
        sistema = SiopAutomacao()
        print("‚úÖ Inicializa√ß√£o funcionando")
    except Exception as e:
        print(f"‚ùå Erro na inicializa√ß√£o: {e}")
        success = False
    
    # Teste 3: Configura√ß√µes
    try:
        if hasattr(sistema, 'config') and sistema.config:
            print("‚úÖ Configura√ß√µes carregadas")
            print(f"   üìä {len(sistema.config.get('filtros', []))} filtros configurados")
        else:
            print("‚ö†Ô∏è Configura√ß√µes vazias")
    except Exception as e:
        print(f"‚ùå Erro nas configura√ß√µes: {e}")
        success = False
    
    return success

def main():
    """Fun√ß√£o principal com argumentos"""
    parser = argparse.ArgumentParser(description='Automa√ß√£o SIOP - MVP Clean')
    parser.add_argument(
        '--mode', 
        choices=['main', 'enhanced', 'test'], 
        default='main',
        help='Modo de execu√ß√£o (padr√£o: main)'
    )
    parser.add_argument(
        '--headless', 
        action='store_true',
        help='Executar em modo headless (sem interface gr√°fica)'
    )
    
    args = parser.parse_args()
    
    print(f"üéØ Modo selecionado: {args.mode}")
    if args.headless:
        print("üîá Modo headless ativado")
    
    if args.mode == 'test':
        success = run_test()
    elif args.mode == 'main':
        success = run_main()
    elif args.mode == 'enhanced':
        success = run_enhanced()
    else:
        print("‚ùå Modo inv√°lido")
        return False
    
    if success:
        print("\n‚úÖ EXECU√á√ÉO CONCLU√çDA COM SUCESSO!")
    else:
        print("\n‚ùå EXECU√á√ÉO FALHOU!")
        sys.exit(1)

if __name__ == "__main__":
    main() 